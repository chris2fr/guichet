/*
authentik

Making authentication simple.

API version: 2023.10.4
Contact: hello@goauthentik.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FlowChallengeResponseRequest - struct for FlowChallengeResponseRequest
type FlowChallengeResponseRequest struct {
	AppleChallengeResponseRequest *AppleChallengeResponseRequest
	AuthenticatorDuoChallengeResponseRequest *AuthenticatorDuoChallengeResponseRequest
	AuthenticatorSMSChallengeResponseRequest *AuthenticatorSMSChallengeResponseRequest
	AuthenticatorStaticChallengeResponseRequest *AuthenticatorStaticChallengeResponseRequest
	AuthenticatorTOTPChallengeResponseRequest *AuthenticatorTOTPChallengeResponseRequest
	AuthenticatorValidationChallengeResponseRequest *AuthenticatorValidationChallengeResponseRequest
	AuthenticatorWebAuthnChallengeResponseRequest *AuthenticatorWebAuthnChallengeResponseRequest
	AutoSubmitChallengeResponseRequest *AutoSubmitChallengeResponseRequest
	CaptchaChallengeResponseRequest *CaptchaChallengeResponseRequest
	ConsentChallengeResponseRequest *ConsentChallengeResponseRequest
	EmailChallengeResponseRequest *EmailChallengeResponseRequest
	IdentificationChallengeResponseRequest *IdentificationChallengeResponseRequest
	OAuthDeviceCodeChallengeResponseRequest *OAuthDeviceCodeChallengeResponseRequest
	OAuthDeviceCodeFinishChallengeResponseRequest *OAuthDeviceCodeFinishChallengeResponseRequest
	PasswordChallengeResponseRequest *PasswordChallengeResponseRequest
	PlexAuthenticationChallengeResponseRequest *PlexAuthenticationChallengeResponseRequest
	PromptChallengeResponseRequest *PromptChallengeResponseRequest
	UserLoginChallengeResponseRequest *UserLoginChallengeResponseRequest
}

// AppleChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns AppleChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func AppleChallengeResponseRequestAsFlowChallengeResponseRequest(v *AppleChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		AppleChallengeResponseRequest: v,
	}
}

// AuthenticatorDuoChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns AuthenticatorDuoChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func AuthenticatorDuoChallengeResponseRequestAsFlowChallengeResponseRequest(v *AuthenticatorDuoChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		AuthenticatorDuoChallengeResponseRequest: v,
	}
}

// AuthenticatorSMSChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns AuthenticatorSMSChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func AuthenticatorSMSChallengeResponseRequestAsFlowChallengeResponseRequest(v *AuthenticatorSMSChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		AuthenticatorSMSChallengeResponseRequest: v,
	}
}

// AuthenticatorStaticChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns AuthenticatorStaticChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func AuthenticatorStaticChallengeResponseRequestAsFlowChallengeResponseRequest(v *AuthenticatorStaticChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		AuthenticatorStaticChallengeResponseRequest: v,
	}
}

// AuthenticatorTOTPChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns AuthenticatorTOTPChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func AuthenticatorTOTPChallengeResponseRequestAsFlowChallengeResponseRequest(v *AuthenticatorTOTPChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		AuthenticatorTOTPChallengeResponseRequest: v,
	}
}

// AuthenticatorValidationChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns AuthenticatorValidationChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func AuthenticatorValidationChallengeResponseRequestAsFlowChallengeResponseRequest(v *AuthenticatorValidationChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		AuthenticatorValidationChallengeResponseRequest: v,
	}
}

// AuthenticatorWebAuthnChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns AuthenticatorWebAuthnChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func AuthenticatorWebAuthnChallengeResponseRequestAsFlowChallengeResponseRequest(v *AuthenticatorWebAuthnChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		AuthenticatorWebAuthnChallengeResponseRequest: v,
	}
}

// AutoSubmitChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns AutoSubmitChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func AutoSubmitChallengeResponseRequestAsFlowChallengeResponseRequest(v *AutoSubmitChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		AutoSubmitChallengeResponseRequest: v,
	}
}

// CaptchaChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns CaptchaChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func CaptchaChallengeResponseRequestAsFlowChallengeResponseRequest(v *CaptchaChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		CaptchaChallengeResponseRequest: v,
	}
}

// ConsentChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns ConsentChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func ConsentChallengeResponseRequestAsFlowChallengeResponseRequest(v *ConsentChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		ConsentChallengeResponseRequest: v,
	}
}

// EmailChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns EmailChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func EmailChallengeResponseRequestAsFlowChallengeResponseRequest(v *EmailChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		EmailChallengeResponseRequest: v,
	}
}

// IdentificationChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns IdentificationChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func IdentificationChallengeResponseRequestAsFlowChallengeResponseRequest(v *IdentificationChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		IdentificationChallengeResponseRequest: v,
	}
}

// OAuthDeviceCodeChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns OAuthDeviceCodeChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func OAuthDeviceCodeChallengeResponseRequestAsFlowChallengeResponseRequest(v *OAuthDeviceCodeChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		OAuthDeviceCodeChallengeResponseRequest: v,
	}
}

// OAuthDeviceCodeFinishChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns OAuthDeviceCodeFinishChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func OAuthDeviceCodeFinishChallengeResponseRequestAsFlowChallengeResponseRequest(v *OAuthDeviceCodeFinishChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		OAuthDeviceCodeFinishChallengeResponseRequest: v,
	}
}

// PasswordChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns PasswordChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func PasswordChallengeResponseRequestAsFlowChallengeResponseRequest(v *PasswordChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		PasswordChallengeResponseRequest: v,
	}
}

// PlexAuthenticationChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns PlexAuthenticationChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func PlexAuthenticationChallengeResponseRequestAsFlowChallengeResponseRequest(v *PlexAuthenticationChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		PlexAuthenticationChallengeResponseRequest: v,
	}
}

// PromptChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns PromptChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func PromptChallengeResponseRequestAsFlowChallengeResponseRequest(v *PromptChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		PromptChallengeResponseRequest: v,
	}
}

// UserLoginChallengeResponseRequestAsFlowChallengeResponseRequest is a convenience function that returns UserLoginChallengeResponseRequest wrapped in FlowChallengeResponseRequest
func UserLoginChallengeResponseRequestAsFlowChallengeResponseRequest(v *UserLoginChallengeResponseRequest) FlowChallengeResponseRequest {
	return FlowChallengeResponseRequest{
		UserLoginChallengeResponseRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FlowChallengeResponseRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AppleChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.AppleChallengeResponseRequest)
	if err == nil {
		jsonAppleChallengeResponseRequest, _ := json.Marshal(dst.AppleChallengeResponseRequest)
		if string(jsonAppleChallengeResponseRequest) == "{}" { // empty struct
			dst.AppleChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.AppleChallengeResponseRequest = nil
	}

	// try to unmarshal data into AuthenticatorDuoChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.AuthenticatorDuoChallengeResponseRequest)
	if err == nil {
		jsonAuthenticatorDuoChallengeResponseRequest, _ := json.Marshal(dst.AuthenticatorDuoChallengeResponseRequest)
		if string(jsonAuthenticatorDuoChallengeResponseRequest) == "{}" { // empty struct
			dst.AuthenticatorDuoChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.AuthenticatorDuoChallengeResponseRequest = nil
	}

	// try to unmarshal data into AuthenticatorSMSChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.AuthenticatorSMSChallengeResponseRequest)
	if err == nil {
		jsonAuthenticatorSMSChallengeResponseRequest, _ := json.Marshal(dst.AuthenticatorSMSChallengeResponseRequest)
		if string(jsonAuthenticatorSMSChallengeResponseRequest) == "{}" { // empty struct
			dst.AuthenticatorSMSChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.AuthenticatorSMSChallengeResponseRequest = nil
	}

	// try to unmarshal data into AuthenticatorStaticChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.AuthenticatorStaticChallengeResponseRequest)
	if err == nil {
		jsonAuthenticatorStaticChallengeResponseRequest, _ := json.Marshal(dst.AuthenticatorStaticChallengeResponseRequest)
		if string(jsonAuthenticatorStaticChallengeResponseRequest) == "{}" { // empty struct
			dst.AuthenticatorStaticChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.AuthenticatorStaticChallengeResponseRequest = nil
	}

	// try to unmarshal data into AuthenticatorTOTPChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.AuthenticatorTOTPChallengeResponseRequest)
	if err == nil {
		jsonAuthenticatorTOTPChallengeResponseRequest, _ := json.Marshal(dst.AuthenticatorTOTPChallengeResponseRequest)
		if string(jsonAuthenticatorTOTPChallengeResponseRequest) == "{}" { // empty struct
			dst.AuthenticatorTOTPChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.AuthenticatorTOTPChallengeResponseRequest = nil
	}

	// try to unmarshal data into AuthenticatorValidationChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.AuthenticatorValidationChallengeResponseRequest)
	if err == nil {
		jsonAuthenticatorValidationChallengeResponseRequest, _ := json.Marshal(dst.AuthenticatorValidationChallengeResponseRequest)
		if string(jsonAuthenticatorValidationChallengeResponseRequest) == "{}" { // empty struct
			dst.AuthenticatorValidationChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.AuthenticatorValidationChallengeResponseRequest = nil
	}

	// try to unmarshal data into AuthenticatorWebAuthnChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.AuthenticatorWebAuthnChallengeResponseRequest)
	if err == nil {
		jsonAuthenticatorWebAuthnChallengeResponseRequest, _ := json.Marshal(dst.AuthenticatorWebAuthnChallengeResponseRequest)
		if string(jsonAuthenticatorWebAuthnChallengeResponseRequest) == "{}" { // empty struct
			dst.AuthenticatorWebAuthnChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.AuthenticatorWebAuthnChallengeResponseRequest = nil
	}

	// try to unmarshal data into AutoSubmitChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.AutoSubmitChallengeResponseRequest)
	if err == nil {
		jsonAutoSubmitChallengeResponseRequest, _ := json.Marshal(dst.AutoSubmitChallengeResponseRequest)
		if string(jsonAutoSubmitChallengeResponseRequest) == "{}" { // empty struct
			dst.AutoSubmitChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.AutoSubmitChallengeResponseRequest = nil
	}

	// try to unmarshal data into CaptchaChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.CaptchaChallengeResponseRequest)
	if err == nil {
		jsonCaptchaChallengeResponseRequest, _ := json.Marshal(dst.CaptchaChallengeResponseRequest)
		if string(jsonCaptchaChallengeResponseRequest) == "{}" { // empty struct
			dst.CaptchaChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.CaptchaChallengeResponseRequest = nil
	}

	// try to unmarshal data into ConsentChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.ConsentChallengeResponseRequest)
	if err == nil {
		jsonConsentChallengeResponseRequest, _ := json.Marshal(dst.ConsentChallengeResponseRequest)
		if string(jsonConsentChallengeResponseRequest) == "{}" { // empty struct
			dst.ConsentChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.ConsentChallengeResponseRequest = nil
	}

	// try to unmarshal data into EmailChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.EmailChallengeResponseRequest)
	if err == nil {
		jsonEmailChallengeResponseRequest, _ := json.Marshal(dst.EmailChallengeResponseRequest)
		if string(jsonEmailChallengeResponseRequest) == "{}" { // empty struct
			dst.EmailChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.EmailChallengeResponseRequest = nil
	}

	// try to unmarshal data into IdentificationChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.IdentificationChallengeResponseRequest)
	if err == nil {
		jsonIdentificationChallengeResponseRequest, _ := json.Marshal(dst.IdentificationChallengeResponseRequest)
		if string(jsonIdentificationChallengeResponseRequest) == "{}" { // empty struct
			dst.IdentificationChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.IdentificationChallengeResponseRequest = nil
	}

	// try to unmarshal data into OAuthDeviceCodeChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.OAuthDeviceCodeChallengeResponseRequest)
	if err == nil {
		jsonOAuthDeviceCodeChallengeResponseRequest, _ := json.Marshal(dst.OAuthDeviceCodeChallengeResponseRequest)
		if string(jsonOAuthDeviceCodeChallengeResponseRequest) == "{}" { // empty struct
			dst.OAuthDeviceCodeChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.OAuthDeviceCodeChallengeResponseRequest = nil
	}

	// try to unmarshal data into OAuthDeviceCodeFinishChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.OAuthDeviceCodeFinishChallengeResponseRequest)
	if err == nil {
		jsonOAuthDeviceCodeFinishChallengeResponseRequest, _ := json.Marshal(dst.OAuthDeviceCodeFinishChallengeResponseRequest)
		if string(jsonOAuthDeviceCodeFinishChallengeResponseRequest) == "{}" { // empty struct
			dst.OAuthDeviceCodeFinishChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.OAuthDeviceCodeFinishChallengeResponseRequest = nil
	}

	// try to unmarshal data into PasswordChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.PasswordChallengeResponseRequest)
	if err == nil {
		jsonPasswordChallengeResponseRequest, _ := json.Marshal(dst.PasswordChallengeResponseRequest)
		if string(jsonPasswordChallengeResponseRequest) == "{}" { // empty struct
			dst.PasswordChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.PasswordChallengeResponseRequest = nil
	}

	// try to unmarshal data into PlexAuthenticationChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.PlexAuthenticationChallengeResponseRequest)
	if err == nil {
		jsonPlexAuthenticationChallengeResponseRequest, _ := json.Marshal(dst.PlexAuthenticationChallengeResponseRequest)
		if string(jsonPlexAuthenticationChallengeResponseRequest) == "{}" { // empty struct
			dst.PlexAuthenticationChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.PlexAuthenticationChallengeResponseRequest = nil
	}

	// try to unmarshal data into PromptChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.PromptChallengeResponseRequest)
	if err == nil {
		jsonPromptChallengeResponseRequest, _ := json.Marshal(dst.PromptChallengeResponseRequest)
		if string(jsonPromptChallengeResponseRequest) == "{}" { // empty struct
			dst.PromptChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.PromptChallengeResponseRequest = nil
	}

	// try to unmarshal data into UserLoginChallengeResponseRequest
	err = newStrictDecoder(data).Decode(&dst.UserLoginChallengeResponseRequest)
	if err == nil {
		jsonUserLoginChallengeResponseRequest, _ := json.Marshal(dst.UserLoginChallengeResponseRequest)
		if string(jsonUserLoginChallengeResponseRequest) == "{}" { // empty struct
			dst.UserLoginChallengeResponseRequest = nil
		} else {
			match++
		}
	} else {
		dst.UserLoginChallengeResponseRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AppleChallengeResponseRequest = nil
		dst.AuthenticatorDuoChallengeResponseRequest = nil
		dst.AuthenticatorSMSChallengeResponseRequest = nil
		dst.AuthenticatorStaticChallengeResponseRequest = nil
		dst.AuthenticatorTOTPChallengeResponseRequest = nil
		dst.AuthenticatorValidationChallengeResponseRequest = nil
		dst.AuthenticatorWebAuthnChallengeResponseRequest = nil
		dst.AutoSubmitChallengeResponseRequest = nil
		dst.CaptchaChallengeResponseRequest = nil
		dst.ConsentChallengeResponseRequest = nil
		dst.EmailChallengeResponseRequest = nil
		dst.IdentificationChallengeResponseRequest = nil
		dst.OAuthDeviceCodeChallengeResponseRequest = nil
		dst.OAuthDeviceCodeFinishChallengeResponseRequest = nil
		dst.PasswordChallengeResponseRequest = nil
		dst.PlexAuthenticationChallengeResponseRequest = nil
		dst.PromptChallengeResponseRequest = nil
		dst.UserLoginChallengeResponseRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FlowChallengeResponseRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FlowChallengeResponseRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FlowChallengeResponseRequest) MarshalJSON() ([]byte, error) {
	if src.AppleChallengeResponseRequest != nil {
		return json.Marshal(&src.AppleChallengeResponseRequest)
	}

	if src.AuthenticatorDuoChallengeResponseRequest != nil {
		return json.Marshal(&src.AuthenticatorDuoChallengeResponseRequest)
	}

	if src.AuthenticatorSMSChallengeResponseRequest != nil {
		return json.Marshal(&src.AuthenticatorSMSChallengeResponseRequest)
	}

	if src.AuthenticatorStaticChallengeResponseRequest != nil {
		return json.Marshal(&src.AuthenticatorStaticChallengeResponseRequest)
	}

	if src.AuthenticatorTOTPChallengeResponseRequest != nil {
		return json.Marshal(&src.AuthenticatorTOTPChallengeResponseRequest)
	}

	if src.AuthenticatorValidationChallengeResponseRequest != nil {
		return json.Marshal(&src.AuthenticatorValidationChallengeResponseRequest)
	}

	if src.AuthenticatorWebAuthnChallengeResponseRequest != nil {
		return json.Marshal(&src.AuthenticatorWebAuthnChallengeResponseRequest)
	}

	if src.AutoSubmitChallengeResponseRequest != nil {
		return json.Marshal(&src.AutoSubmitChallengeResponseRequest)
	}

	if src.CaptchaChallengeResponseRequest != nil {
		return json.Marshal(&src.CaptchaChallengeResponseRequest)
	}

	if src.ConsentChallengeResponseRequest != nil {
		return json.Marshal(&src.ConsentChallengeResponseRequest)
	}

	if src.EmailChallengeResponseRequest != nil {
		return json.Marshal(&src.EmailChallengeResponseRequest)
	}

	if src.IdentificationChallengeResponseRequest != nil {
		return json.Marshal(&src.IdentificationChallengeResponseRequest)
	}

	if src.OAuthDeviceCodeChallengeResponseRequest != nil {
		return json.Marshal(&src.OAuthDeviceCodeChallengeResponseRequest)
	}

	if src.OAuthDeviceCodeFinishChallengeResponseRequest != nil {
		return json.Marshal(&src.OAuthDeviceCodeFinishChallengeResponseRequest)
	}

	if src.PasswordChallengeResponseRequest != nil {
		return json.Marshal(&src.PasswordChallengeResponseRequest)
	}

	if src.PlexAuthenticationChallengeResponseRequest != nil {
		return json.Marshal(&src.PlexAuthenticationChallengeResponseRequest)
	}

	if src.PromptChallengeResponseRequest != nil {
		return json.Marshal(&src.PromptChallengeResponseRequest)
	}

	if src.UserLoginChallengeResponseRequest != nil {
		return json.Marshal(&src.UserLoginChallengeResponseRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FlowChallengeResponseRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AppleChallengeResponseRequest != nil {
		return obj.AppleChallengeResponseRequest
	}

	if obj.AuthenticatorDuoChallengeResponseRequest != nil {
		return obj.AuthenticatorDuoChallengeResponseRequest
	}

	if obj.AuthenticatorSMSChallengeResponseRequest != nil {
		return obj.AuthenticatorSMSChallengeResponseRequest
	}

	if obj.AuthenticatorStaticChallengeResponseRequest != nil {
		return obj.AuthenticatorStaticChallengeResponseRequest
	}

	if obj.AuthenticatorTOTPChallengeResponseRequest != nil {
		return obj.AuthenticatorTOTPChallengeResponseRequest
	}

	if obj.AuthenticatorValidationChallengeResponseRequest != nil {
		return obj.AuthenticatorValidationChallengeResponseRequest
	}

	if obj.AuthenticatorWebAuthnChallengeResponseRequest != nil {
		return obj.AuthenticatorWebAuthnChallengeResponseRequest
	}

	if obj.AutoSubmitChallengeResponseRequest != nil {
		return obj.AutoSubmitChallengeResponseRequest
	}

	if obj.CaptchaChallengeResponseRequest != nil {
		return obj.CaptchaChallengeResponseRequest
	}

	if obj.ConsentChallengeResponseRequest != nil {
		return obj.ConsentChallengeResponseRequest
	}

	if obj.EmailChallengeResponseRequest != nil {
		return obj.EmailChallengeResponseRequest
	}

	if obj.IdentificationChallengeResponseRequest != nil {
		return obj.IdentificationChallengeResponseRequest
	}

	if obj.OAuthDeviceCodeChallengeResponseRequest != nil {
		return obj.OAuthDeviceCodeChallengeResponseRequest
	}

	if obj.OAuthDeviceCodeFinishChallengeResponseRequest != nil {
		return obj.OAuthDeviceCodeFinishChallengeResponseRequest
	}

	if obj.PasswordChallengeResponseRequest != nil {
		return obj.PasswordChallengeResponseRequest
	}

	if obj.PlexAuthenticationChallengeResponseRequest != nil {
		return obj.PlexAuthenticationChallengeResponseRequest
	}

	if obj.PromptChallengeResponseRequest != nil {
		return obj.PromptChallengeResponseRequest
	}

	if obj.UserLoginChallengeResponseRequest != nil {
		return obj.UserLoginChallengeResponseRequest
	}

	// all schemas are nil
	return nil
}

type NullableFlowChallengeResponseRequest struct {
	value *FlowChallengeResponseRequest
	isSet bool
}

func (v NullableFlowChallengeResponseRequest) Get() *FlowChallengeResponseRequest {
	return v.value
}

func (v *NullableFlowChallengeResponseRequest) Set(val *FlowChallengeResponseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowChallengeResponseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowChallengeResponseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowChallengeResponseRequest(val *FlowChallengeResponseRequest) *NullableFlowChallengeResponseRequest {
	return &NullableFlowChallengeResponseRequest{value: val, isSet: true}
}

func (v NullableFlowChallengeResponseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowChallengeResponseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


