/*
authentik

Testing CryptoAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_CryptoAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CryptoAPIService CryptoCertificatekeypairsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CryptoAPI.CryptoCertificatekeypairsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoAPIService CryptoCertificatekeypairsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		httpRes, err := apiClient.CryptoAPI.CryptoCertificatekeypairsDestroy(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoAPIService CryptoCertificatekeypairsGenerateCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CryptoAPI.CryptoCertificatekeypairsGenerateCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoAPIService CryptoCertificatekeypairsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CryptoAPI.CryptoCertificatekeypairsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoAPIService CryptoCertificatekeypairsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		resp, httpRes, err := apiClient.CryptoAPI.CryptoCertificatekeypairsPartialUpdate(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoAPIService CryptoCertificatekeypairsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		resp, httpRes, err := apiClient.CryptoAPI.CryptoCertificatekeypairsRetrieve(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoAPIService CryptoCertificatekeypairsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		resp, httpRes, err := apiClient.CryptoAPI.CryptoCertificatekeypairsUpdate(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoAPIService CryptoCertificatekeypairsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		resp, httpRes, err := apiClient.CryptoAPI.CryptoCertificatekeypairsUsedByList(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoAPIService CryptoCertificatekeypairsViewCertificateRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		resp, httpRes, err := apiClient.CryptoAPI.CryptoCertificatekeypairsViewCertificateRetrieve(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoAPIService CryptoCertificatekeypairsViewPrivateKeyRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		resp, httpRes, err := apiClient.CryptoAPI.CryptoCertificatekeypairsViewPrivateKeyRetrieve(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
