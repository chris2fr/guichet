/*
authentik

Testing ManagedAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ManagedAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ManagedAPIService ManagedBlueprintsApplyCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceUuid string

		resp, httpRes, err := apiClient.ManagedAPI.ManagedBlueprintsApplyCreate(context.Background(), instanceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAPIService ManagedBlueprintsAvailableList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedAPI.ManagedBlueprintsAvailableList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAPIService ManagedBlueprintsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedAPI.ManagedBlueprintsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAPIService ManagedBlueprintsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceUuid string

		httpRes, err := apiClient.ManagedAPI.ManagedBlueprintsDestroy(context.Background(), instanceUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAPIService ManagedBlueprintsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedAPI.ManagedBlueprintsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAPIService ManagedBlueprintsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceUuid string

		resp, httpRes, err := apiClient.ManagedAPI.ManagedBlueprintsPartialUpdate(context.Background(), instanceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAPIService ManagedBlueprintsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceUuid string

		resp, httpRes, err := apiClient.ManagedAPI.ManagedBlueprintsRetrieve(context.Background(), instanceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAPIService ManagedBlueprintsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceUuid string

		resp, httpRes, err := apiClient.ManagedAPI.ManagedBlueprintsUpdate(context.Background(), instanceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedAPIService ManagedBlueprintsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceUuid string

		resp, httpRes, err := apiClient.ManagedAPI.ManagedBlueprintsUsedByList(context.Background(), instanceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
