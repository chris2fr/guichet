/*
authentik

Testing PoliciesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_PoliciesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PoliciesAPIService PoliciesAllCacheClearCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PoliciesAPI.PoliciesAllCacheClearCreate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesAllCacheInfoRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesAllCacheInfoRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesAllDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesAPI.PoliciesAllDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesAllList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesAllList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesAllRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesAllRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesAllTestCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesAllTestCreate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesAllTypesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesAllTypesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesAllUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesAllUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesBindingsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesBindingsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesBindingsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyBindingUuid string

		httpRes, err := apiClient.PoliciesAPI.PoliciesBindingsDestroy(context.Background(), policyBindingUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesBindingsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesBindingsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesBindingsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyBindingUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesBindingsPartialUpdate(context.Background(), policyBindingUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesBindingsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyBindingUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesBindingsRetrieve(context.Background(), policyBindingUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesBindingsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyBindingUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesBindingsUpdate(context.Background(), policyBindingUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesBindingsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyBindingUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesBindingsUsedByList(context.Background(), policyBindingUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesDummyCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesDummyCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesDummyDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesAPI.PoliciesDummyDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesDummyList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesDummyList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesDummyPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesDummyPartialUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesDummyRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesDummyRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesDummyUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesDummyUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesDummyUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesDummyUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesEventMatcherCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesEventMatcherCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesEventMatcherDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesAPI.PoliciesEventMatcherDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesEventMatcherList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesEventMatcherList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesEventMatcherPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesEventMatcherPartialUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesEventMatcherRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesEventMatcherRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesEventMatcherUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesEventMatcherUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesEventMatcherUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesEventMatcherUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesExpressionCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesExpressionCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesExpressionDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesAPI.PoliciesExpressionDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesExpressionList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesExpressionList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesExpressionPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesExpressionPartialUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesExpressionRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesExpressionRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesExpressionUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesExpressionUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesExpressionUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesExpressionUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordExpiryCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordExpiryCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordExpiryDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordExpiryDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordExpiryList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordExpiryList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordExpiryPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordExpiryPartialUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordExpiryRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordExpiryRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordExpiryUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordExpiryUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordExpiryUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordExpiryUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordPartialUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesPasswordUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesPasswordUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesReputationCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesReputationCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesReputationDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesAPI.PoliciesReputationDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesReputationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesReputationList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesReputationPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesReputationPartialUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesReputationRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesReputationRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesReputationScoresDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reputationUuid string

		httpRes, err := apiClient.PoliciesAPI.PoliciesReputationScoresDestroy(context.Background(), reputationUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesReputationScoresList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesReputationScoresList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesReputationScoresRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reputationUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesReputationScoresRetrieve(context.Background(), reputationUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesReputationScoresUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reputationUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesReputationScoresUsedByList(context.Background(), reputationUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesReputationUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesReputationUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesAPIService PoliciesReputationUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesAPI.PoliciesReputationUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
