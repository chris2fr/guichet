/*
authentik

Testing FlowsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_FlowsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FlowsAPIService FlowsBindingsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowsAPI.FlowsBindingsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsBindingsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fsbUuid string

		httpRes, err := apiClient.FlowsAPI.FlowsBindingsDestroy(context.Background(), fsbUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsBindingsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowsAPI.FlowsBindingsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsBindingsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fsbUuid string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsBindingsPartialUpdate(context.Background(), fsbUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsBindingsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fsbUuid string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsBindingsRetrieve(context.Background(), fsbUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsBindingsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fsbUuid string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsBindingsUpdate(context.Background(), fsbUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsBindingsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fsbUuid string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsBindingsUsedByList(context.Background(), fsbUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsExecutorGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var flowSlug string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsExecutorGet(context.Background(), flowSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsExecutorSolve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var flowSlug string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsExecutorSolve(context.Background(), flowSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInspectorGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var flowSlug string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsInspectorGet(context.Background(), flowSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesCacheClearCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.FlowsAPI.FlowsInstancesCacheClearCreate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesCacheInfoRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowsAPI.FlowsInstancesCacheInfoRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowsAPI.FlowsInstancesCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		httpRes, err := apiClient.FlowsAPI.FlowsInstancesDestroy(context.Background(), slug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesDiagramRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsInstancesDiagramRetrieve(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesExecuteRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsInstancesExecuteRetrieve(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesExportRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsInstancesExportRetrieve(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesImportCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowsAPI.FlowsInstancesImportCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowsAPI.FlowsInstancesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsInstancesPartialUpdate(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsInstancesRetrieve(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesSetBackgroundCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		httpRes, err := apiClient.FlowsAPI.FlowsInstancesSetBackgroundCreate(context.Background(), slug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesSetBackgroundUrlCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		httpRes, err := apiClient.FlowsAPI.FlowsInstancesSetBackgroundUrlCreate(context.Background(), slug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsInstancesUpdate(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsAPIService FlowsInstancesUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsAPI.FlowsInstancesUsedByList(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
