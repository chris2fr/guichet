/*
authentik

Testing StagesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_StagesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StagesAPIService StagesAllDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesAllDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAllList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAllList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAllRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAllRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAllTypesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAllTypesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAllUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAllUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAllUserSettingsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAllUserSettingsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorDuoCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorDuoCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorDuoDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesAuthenticatorDuoDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorDuoEnrollmentStatusCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorDuoEnrollmentStatusCreate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorDuoImportDeviceManualCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesAuthenticatorDuoImportDeviceManualCreate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorDuoImportDevicesAutomaticCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorDuoImportDevicesAutomaticCreate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorDuoList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorDuoList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorDuoPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorDuoPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorDuoRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorDuoRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorDuoUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorDuoUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorDuoUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorDuoUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorSmsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorSmsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorSmsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesAuthenticatorSmsDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorSmsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorSmsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorSmsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorSmsPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorSmsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorSmsRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorSmsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorSmsUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorSmsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorSmsUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorStaticCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorStaticCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorStaticDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesAuthenticatorStaticDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorStaticList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorStaticList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorStaticPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorStaticPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorStaticRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorStaticRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorStaticUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorStaticUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorStaticUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorStaticUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorTotpCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorTotpCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorTotpDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesAuthenticatorTotpDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorTotpList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorTotpList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorTotpPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorTotpPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorTotpRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorTotpRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorTotpUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorTotpUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorTotpUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorTotpUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorValidateCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorValidateCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorValidateDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesAuthenticatorValidateDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorValidateList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorValidateList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorValidatePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorValidatePartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorValidateRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorValidateRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorValidateUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorValidateUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorValidateUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorValidateUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorWebauthnCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorWebauthnCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorWebauthnDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesAuthenticatorWebauthnDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorWebauthnList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorWebauthnList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorWebauthnPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorWebauthnPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorWebauthnRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorWebauthnRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorWebauthnUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorWebauthnUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesAuthenticatorWebauthnUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesAuthenticatorWebauthnUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesCaptchaCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesCaptchaCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesCaptchaDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesCaptchaDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesCaptchaList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesCaptchaList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesCaptchaPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesCaptchaPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesCaptchaRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesCaptchaRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesCaptchaUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesCaptchaUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesCaptchaUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesCaptchaUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesConsentCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesConsentCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesConsentDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesConsentDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesConsentList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesConsentList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesConsentPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesConsentPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesConsentRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesConsentRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesConsentUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesConsentUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesConsentUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesConsentUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDenyCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesDenyCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDenyDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesDenyDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDenyList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesDenyList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDenyPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesDenyPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDenyRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesDenyRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDenyUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesDenyUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDenyUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesDenyUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDummyCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesDummyCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDummyDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesDummyDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDummyList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesDummyList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDummyPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesDummyPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDummyRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesDummyRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDummyUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesDummyUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesDummyUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesDummyUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesEmailCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesEmailCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesEmailDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesEmailDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesEmailList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesEmailList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesEmailPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesEmailPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesEmailRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesEmailRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesEmailTemplatesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesEmailTemplatesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesEmailUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesEmailUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesEmailUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesEmailUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesIdentificationCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesIdentificationCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesIdentificationDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesIdentificationDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesIdentificationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesIdentificationList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesIdentificationPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesIdentificationPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesIdentificationRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesIdentificationRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesIdentificationUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesIdentificationUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesIdentificationUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesIdentificationUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationInvitationsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesInvitationInvitationsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationInvitationsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inviteUuid string

		httpRes, err := apiClient.StagesAPI.StagesInvitationInvitationsDestroy(context.Background(), inviteUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationInvitationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesInvitationInvitationsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationInvitationsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inviteUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesInvitationInvitationsPartialUpdate(context.Background(), inviteUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationInvitationsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inviteUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesInvitationInvitationsRetrieve(context.Background(), inviteUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationInvitationsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inviteUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesInvitationInvitationsUpdate(context.Background(), inviteUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationInvitationsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inviteUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesInvitationInvitationsUsedByList(context.Background(), inviteUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationStagesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesInvitationStagesCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationStagesDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesInvitationStagesDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationStagesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesInvitationStagesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationStagesPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesInvitationStagesPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationStagesRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesInvitationStagesRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationStagesUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesInvitationStagesUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesInvitationStagesUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesInvitationStagesUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPasswordCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesPasswordCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPasswordDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesPasswordDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPasswordList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesPasswordList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPasswordPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesPasswordPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPasswordRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesPasswordRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPasswordUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesPasswordUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPasswordUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesPasswordUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptPromptsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesPromptPromptsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptPromptsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promptUuid string

		httpRes, err := apiClient.StagesAPI.StagesPromptPromptsDestroy(context.Background(), promptUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptPromptsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesPromptPromptsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptPromptsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promptUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesPromptPromptsPartialUpdate(context.Background(), promptUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptPromptsPreviewCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesPromptPromptsPreviewCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptPromptsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promptUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesPromptPromptsRetrieve(context.Background(), promptUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptPromptsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promptUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesPromptPromptsUpdate(context.Background(), promptUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptPromptsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promptUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesPromptPromptsUsedByList(context.Background(), promptUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptStagesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesPromptStagesCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptStagesDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesPromptStagesDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptStagesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesPromptStagesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptStagesPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesPromptStagesPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptStagesRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesPromptStagesRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptStagesUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesPromptStagesUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesPromptStagesUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesPromptStagesUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserDeleteCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesUserDeleteCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserDeleteDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesUserDeleteDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserDeleteList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesUserDeleteList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserDeletePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserDeletePartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserDeleteRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserDeleteRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserDeleteUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserDeleteUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserDeleteUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserDeleteUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLoginCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesUserLoginCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLoginDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesUserLoginDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLoginList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesUserLoginList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLoginPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserLoginPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLoginRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserLoginRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLoginUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserLoginUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLoginUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserLoginUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLogoutCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesUserLogoutCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLogoutDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesUserLogoutDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLogoutList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesUserLogoutList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLogoutPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserLogoutPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLogoutRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserLogoutRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLogoutUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserLogoutUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserLogoutUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserLogoutUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserWriteCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesUserWriteCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserWriteDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesAPI.StagesUserWriteDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserWriteList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesAPI.StagesUserWriteList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserWritePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserWritePartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserWriteRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserWriteRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserWriteUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserWriteUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesAPIService StagesUserWriteUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesAPI.StagesUserWriteUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
