/*
authentik

Testing PropertymappingsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_PropertymappingsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PropertymappingsAPIService PropertymappingsAllDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsAllDestroy(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsAllList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsAllList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsAllRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsAllRetrieve(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsAllTestCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsAllTestCreate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsAllTypesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsAllTypesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsAllUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsAllUsedByList(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsLdapCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsLdapCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsLdapDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsLdapDestroy(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsLdapList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsLdapList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsLdapPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsLdapPartialUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsLdapRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsLdapRetrieve(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsLdapUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsLdapUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsLdapUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsLdapUsedByList(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsNotificationCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsNotificationCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsNotificationDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsNotificationDestroy(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsNotificationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsNotificationList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsNotificationPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsNotificationPartialUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsNotificationRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsNotificationRetrieve(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsNotificationUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsNotificationUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsNotificationUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsNotificationUsedByList(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsSamlCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsSamlCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsSamlDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsSamlDestroy(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsSamlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsSamlList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsSamlPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsSamlPartialUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsSamlRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsSamlRetrieve(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsSamlUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsSamlUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsSamlUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsSamlUsedByList(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScimCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScimCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScimDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScimDestroy(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScimList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScimList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScimPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScimPartialUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScimRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScimRetrieve(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScimUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScimUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScimUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScimUsedByList(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScopeCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScopeCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScopeDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScopeDestroy(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScopeList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScopeList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScopePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScopePartialUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScopeRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScopeRetrieve(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScopeUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScopeUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsAPIService PropertymappingsScopeUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsAPI.PropertymappingsScopeUsedByList(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
