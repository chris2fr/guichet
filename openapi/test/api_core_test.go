/*
authentik

Testing CoreAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_CoreAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CoreAPIService CoreApplicationsCheckAccessRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.CoreAPI.CoreApplicationsCheckAccessRetrieve(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreApplicationsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreApplicationsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreApplicationsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		httpRes, err := apiClient.CoreAPI.CoreApplicationsDestroy(context.Background(), slug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreApplicationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreApplicationsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreApplicationsMetricsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.CoreAPI.CoreApplicationsMetricsList(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreApplicationsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.CoreAPI.CoreApplicationsPartialUpdate(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreApplicationsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.CoreAPI.CoreApplicationsRetrieve(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreApplicationsSetIconCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		httpRes, err := apiClient.CoreAPI.CoreApplicationsSetIconCreate(context.Background(), slug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreApplicationsSetIconUrlCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		httpRes, err := apiClient.CoreAPI.CoreApplicationsSetIconUrlCreate(context.Background(), slug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreApplicationsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.CoreAPI.CoreApplicationsUpdate(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreApplicationsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.CoreAPI.CoreApplicationsUsedByList(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreAuthenticatedSessionsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string

		httpRes, err := apiClient.CoreAPI.CoreAuthenticatedSessionsDestroy(context.Background(), uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreAuthenticatedSessionsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreAuthenticatedSessionsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreAuthenticatedSessionsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string

		resp, httpRes, err := apiClient.CoreAPI.CoreAuthenticatedSessionsRetrieve(context.Background(), uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreAuthenticatedSessionsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string

		resp, httpRes, err := apiClient.CoreAPI.CoreAuthenticatedSessionsUsedByList(context.Background(), uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreGroupsAddUserCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupUuid string

		httpRes, err := apiClient.CoreAPI.CoreGroupsAddUserCreate(context.Background(), groupUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreGroupsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreGroupsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreGroupsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupUuid string

		httpRes, err := apiClient.CoreAPI.CoreGroupsDestroy(context.Background(), groupUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreGroupsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreGroupsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreGroupsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupUuid string

		resp, httpRes, err := apiClient.CoreAPI.CoreGroupsPartialUpdate(context.Background(), groupUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreGroupsRemoveUserCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupUuid string

		httpRes, err := apiClient.CoreAPI.CoreGroupsRemoveUserCreate(context.Background(), groupUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreGroupsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupUuid string

		resp, httpRes, err := apiClient.CoreAPI.CoreGroupsRetrieve(context.Background(), groupUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreGroupsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupUuid string

		resp, httpRes, err := apiClient.CoreAPI.CoreGroupsUpdate(context.Background(), groupUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreGroupsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupUuid string

		resp, httpRes, err := apiClient.CoreAPI.CoreGroupsUsedByList(context.Background(), groupUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTenantsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreTenantsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTenantsCurrentRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreTenantsCurrentRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTenantsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantUuid string

		httpRes, err := apiClient.CoreAPI.CoreTenantsDestroy(context.Background(), tenantUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTenantsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreTenantsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTenantsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantUuid string

		resp, httpRes, err := apiClient.CoreAPI.CoreTenantsPartialUpdate(context.Background(), tenantUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTenantsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantUuid string

		resp, httpRes, err := apiClient.CoreAPI.CoreTenantsRetrieve(context.Background(), tenantUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTenantsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantUuid string

		resp, httpRes, err := apiClient.CoreAPI.CoreTenantsUpdate(context.Background(), tenantUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTenantsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantUuid string

		resp, httpRes, err := apiClient.CoreAPI.CoreTenantsUsedByList(context.Background(), tenantUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTokensCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreTokensCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTokensDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identifier string

		httpRes, err := apiClient.CoreAPI.CoreTokensDestroy(context.Background(), identifier).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTokensList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreTokensList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTokensPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identifier string

		resp, httpRes, err := apiClient.CoreAPI.CoreTokensPartialUpdate(context.Background(), identifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTokensRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identifier string

		resp, httpRes, err := apiClient.CoreAPI.CoreTokensRetrieve(context.Background(), identifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTokensSetKeyCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identifier string

		httpRes, err := apiClient.CoreAPI.CoreTokensSetKeyCreate(context.Background(), identifier).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTokensUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identifier string

		resp, httpRes, err := apiClient.CoreAPI.CoreTokensUpdate(context.Background(), identifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTokensUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identifier string

		resp, httpRes, err := apiClient.CoreAPI.CoreTokensUsedByList(context.Background(), identifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTokensViewKeyRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identifier string

		resp, httpRes, err := apiClient.CoreAPI.CoreTokensViewKeyRetrieve(context.Background(), identifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreTransactionalApplicationsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreTransactionalApplicationsUpdate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUserConsentDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.CoreAPI.CoreUserConsentDestroy(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUserConsentList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreUserConsentList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUserConsentRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.CoreAPI.CoreUserConsentRetrieve(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUserConsentUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.CoreAPI.CoreUserConsentUsedByList(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreUsersCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.CoreAPI.CoreUsersDestroy(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersImpersonateCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.CoreAPI.CoreUsersImpersonateCreate(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersImpersonateEndRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.CoreAPI.CoreUsersImpersonateEndRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreUsersList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersMeRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreUsersMeRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersMetricsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.CoreAPI.CoreUsersMetricsRetrieve(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.CoreAPI.CoreUsersPartialUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersPathsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreUsersPathsRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersRecoveryEmailRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.CoreAPI.CoreUsersRecoveryEmailRetrieve(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersRecoveryRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.CoreAPI.CoreUsersRecoveryRetrieve(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.CoreAPI.CoreUsersRetrieve(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersServiceAccountCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CoreAPI.CoreUsersServiceAccountCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersSetPasswordCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.CoreAPI.CoreUsersSetPasswordCreate(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.CoreAPI.CoreUsersUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CoreAPIService CoreUsersUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.CoreAPI.CoreUsersUsedByList(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
