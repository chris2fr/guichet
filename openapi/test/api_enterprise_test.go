/*
authentik

Testing EnterpriseAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_EnterpriseAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EnterpriseAPIService EnterpriseLicenseCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnterpriseAPI.EnterpriseLicenseCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseAPIService EnterpriseLicenseDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseUuid string

		httpRes, err := apiClient.EnterpriseAPI.EnterpriseLicenseDestroy(context.Background(), licenseUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseAPIService EnterpriseLicenseForecastRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnterpriseAPI.EnterpriseLicenseForecastRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseAPIService EnterpriseLicenseGetInstallIdRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnterpriseAPI.EnterpriseLicenseGetInstallIdRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseAPIService EnterpriseLicenseList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnterpriseAPI.EnterpriseLicenseList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseAPIService EnterpriseLicensePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseUuid string

		resp, httpRes, err := apiClient.EnterpriseAPI.EnterpriseLicensePartialUpdate(context.Background(), licenseUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseAPIService EnterpriseLicenseRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseUuid string

		resp, httpRes, err := apiClient.EnterpriseAPI.EnterpriseLicenseRetrieve(context.Background(), licenseUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseAPIService EnterpriseLicenseSummaryRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnterpriseAPI.EnterpriseLicenseSummaryRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseAPIService EnterpriseLicenseUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseUuid string

		resp, httpRes, err := apiClient.EnterpriseAPI.EnterpriseLicenseUpdate(context.Background(), licenseUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseAPIService EnterpriseLicenseUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseUuid string

		resp, httpRes, err := apiClient.EnterpriseAPI.EnterpriseLicenseUsedByList(context.Background(), licenseUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
